// frontend/lasko-frontend/src/hooks/useAuth.js - KOMPLETNIE NAPRAWIONY I ZSYNCHRONIZOWANY
import { useState, useEffect } from 'react';
import apiService from '../services/api';
import { isAuthenticated, getAccessToken, getTokenInfo, getUserData } from '../services/authService';

/**
 * Hook useAuth - alternatywa dla AuthContext dla komponent√≥w, kt√≥re nie majƒÖ dostƒôpu do Context
 * UWAGA: Preferuj u≈ºywanie AuthContext zamiast tego hooka w nowych komponentach!
 */
export const useAuth = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // ============================================================================
  // INICJALIZACJA I SPRAWDZANIE STANU
  // ============================================================================
  useEffect(() => {
    checkAuthStatus();
  }, []);

  const checkAuthStatus = async () => {
    try {
      setLoading(true);
      setError(null);

      console.log('üîç [useAuth] Sprawdzanie stanu autoryzacji...');

      if (isAuthenticated()) {
        // Spr√≥buj pobraƒá dane z localStorage
        const userData = getUserData();
        if (userData) {
          setUser(userData);
          console.log('‚úÖ [useAuth] U≈ºytkownik za≈Çadowany z localStorage:', userData.username);
        }

        // Spr√≥buj od≈õwie≈ºyƒá dane profilu z serwera
        try {
          const profileData = await apiService.fetchUserProfile();
          if (profileData && profileData.user) {
            setUser(profileData.user);
            console.log('‚úÖ [useAuth] Profil zaktualizowany z serwera:', profileData.user.username);
          }
        } catch (profileError) {
          console.warn('‚ö†Ô∏è [useAuth] Nie uda≈Ço siƒô pobraƒá profilu z serwera:', profileError.message);
          // Nie wyczy≈õciƒá u≈ºytkownika - mo≈ºe byƒá tymczasowy b≈ÇƒÖd sieci
        }
      } else {
        console.log('‚ùå [useAuth] U≈ºytkownik nie jest zalogowany');
        setUser(null);
      }
    } catch (error) {
      console.error('‚ùå [useAuth] B≈ÇƒÖd sprawdzania autoryzacji:', error);
      setError(error.message);
      
      // Je≈õli b≈ÇƒÖd autoryzacji, wyczy≈õƒá u≈ºytkownika
      if (error.message.includes('autoryzacji') || error.message.includes('401')) {
        apiService.logout();
        setUser(null);
      }
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // REJESTRACJA
  // ============================================================================
  const register = async (userData) => {
    try {
      setLoading(true);
      setError(null);

      console.log('üîÑ [useAuth] Rozpoczynam rejestracjƒô:', userData.username);
      const response = await apiService.register(userData);
      console.log('‚úÖ [useAuth] Rejestracja udana:', response);

      // Aktualizuj stan u≈ºytkownika
      if (response.user) {
        setUser(response.user);
      }

      // Je≈õli nie ma token√≥w, spr√≥buj zalogowaƒá automatycznie
      if (!isAuthenticated() && userData.email && userData.password) {
        console.log('üîÑ [useAuth] Brak token√≥w po rejestracji, wykonujƒô automatyczne logowanie');
        const loginResponse = await apiService.login({
          login: userData.email,
          password: userData.password
        });
        
        if (loginResponse.user) {
          setUser(loginResponse.user);
        }
      }

      return response;
    } catch (error) {
      console.error('‚ùå [useAuth] B≈ÇƒÖd rejestracji:', error);
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // LOGOWANIE
  // ============================================================================
  const login = async (credentials) => {
    try {
      setLoading(true);
      setError(null);

      console.log('üîÑ [useAuth] Rozpoczynam logowanie:', credentials.login || credentials.email);
      const response = await apiService.login(credentials);
      console.log('‚úÖ [useAuth] Logowanie udane:', response);

      // Aktualizuj stan u≈ºytkownika
      if (response.user) {
        setUser(response.user);
      }

      return response;
    } catch (error) {
      console.error('‚ùå [useAuth] B≈ÇƒÖd logowania:', error);
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // WYLOGOWANIE
  // ============================================================================
  const logout = async () => {
    try {
      console.log('üîì [useAuth] Wylogowywanie u≈ºytkownika...');
      await apiService.logout();
      setUser(null);
      setError(null);
      console.log('‚úÖ [useAuth] U≈ºytkownik wylogowany');
    } catch (error) {
      console.error('‚ùå [useAuth] B≈ÇƒÖd wylogowania:', error);
      // Mimo b≈Çƒôdu wyczy≈õƒá stan lokalny
      setUser(null);
      setError(null);
    }
  };

  // ============================================================================
  // FUNKCJE SPRAWDZAJƒÑCE I POMOCNICZE
  // ============================================================================
  const isUserAuthenticated = () => {
    return isAuthenticated() && !!user;
  };

  const getToken = () => {
    return getAccessToken();
  };

  const getCurrentUser = () => {
    return user || getUserData();
  };

  const refreshUserData = async () => {
    if (!isAuthenticated()) {
      return null;
    }

    try {
      const profileData = await apiService.fetchUserProfile();
      if (profileData && profileData.user) {
        setUser(profileData.user);
        return profileData.user;
      }
    } catch (error) {
      console.error('‚ùå [useAuth] B≈ÇƒÖd od≈õwie≈ºania danych u≈ºytkownika:', error);
      throw error;
    }
  };

  // ============================================================================
  // FUNKCJE API
  // ============================================================================
  const updateProfile = async (profileData) => {
    try {
      console.log('üîÑ [useAuth] Aktualizacja profilu u≈ºytkownika');
      const response = await apiService.updateUserProfile(profileData);
      
      // Od≈õwie≈º dane u≈ºytkownika po aktualizacji
      if (response) {
        await refreshUserData();
      }
      
      return response;
    } catch (error) {
      console.error('‚ùå [useAuth] B≈ÇƒÖd aktualizacji profilu:', error);
      setError(error.message);
      throw error;
    }
  };

  const generateRecommendations = async (method = 'hybrid', preferences = {}) => {
    try {
      console.log('ü§ñ [useAuth] Generowanie rekomendacji:', { method, preferences });
      return await apiService.generateRecommendations(method, preferences);
    } catch (error) {
      console.error('‚ùå [useAuth] B≈ÇƒÖd generowania rekomendacji:', error);
      setError(error.message);
      throw error;
    }
  };

  // ============================================================================
  // FUNKCJE DEBUGOWANIA
  // ============================================================================
  const debugAuth = () => {
    console.log('üîç [useAuth] === DIAGNOSTYKA useAuth HOOK ===');
    console.log('='.repeat(50));
    console.log('Hook State:');
    console.log('  user:', user);
    console.log('  loading:', loading);
    console.log('  error:', error);
    console.log('');
    console.log('Auth Service State:');
    console.log('  isAuthenticated:', isAuthenticated());
    console.log('  hasToken:', !!getAccessToken());
    console.log('  userData:', getUserData());
    
    const tokenInfo = getTokenInfo();
    if (tokenInfo) {
      console.log('  tokenInfo:', tokenInfo);
    }
    console.log('='.repeat(50));
  };

  // ============================================================================
  // RETURN HOOK VALUES
  // ============================================================================
  return {
    // Stan
    user,
    loading,
    error,
    
    // Funkcje autoryzacji
    register,
    login,
    logout,
    
    // Funkcje sprawdzajƒÖce
    isAuthenticated: isUserAuthenticated,
    getToken,
    getCurrentUser,
    
    // Funkcje API
    updateProfile,
    generateRecommendations,
    refreshUserData,
    
    // Funkcje pomocnicze
    checkAuthStatus,
    debugAuth,
    
    // Kompatybilno≈õƒá z API service
    apiService
  };
};

export default useAuth;